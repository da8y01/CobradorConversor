/*
 * CobradorConversorView.java
 */

package cobradorconversor;

import au.com.bytecode.opencsv.CSVReader;
import java.awt.Color;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.json.me.JSONArray;
import org.json.me.JSONObject;

/**
 * The application's main frame.
 */
public class CobradorConversorView extends FrameView {

    public CobradorConversorView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = CobradorConversorApp.getApplication().getMainFrame();
            aboutBox = new CobradorConversorAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        CobradorConversorApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonExpendiosCSVJSON = new javax.swing.JButton();
        jButtonExpendiosJSONCSV = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelExpendiosMessages = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonConsignatariasCSVJSON = new javax.swing.JButton();
        jButtonConsignatariasJSONCSV = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelConsignatariasMessages = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cobradorconversor.CobradorConversorApp.class).getContext().getResourceMap(CobradorConversorView.class);
        jButtonExpendiosCSVJSON.setText(resourceMap.getString("jButtonExpendiosCSVJSON.text")); // NOI18N
        jButtonExpendiosCSVJSON.setName("jButtonExpendiosCSVJSON"); // NOI18N
        jButtonExpendiosCSVJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpendiosCSVJSONActionPerformed(evt);
            }
        });

        jButtonExpendiosJSONCSV.setText(resourceMap.getString("jButtonExpendiosJSONCSV.text")); // NOI18N
        jButtonExpendiosJSONCSV.setName("jButtonExpendiosJSONCSV"); // NOI18N
        jButtonExpendiosJSONCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExpendiosJSONCSVActionPerformed(evt);
            }
        });

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabelExpendiosMessages.setFont(resourceMap.getFont("jLabelExpendiosMessages.font")); // NOI18N
        jLabelExpendiosMessages.setText(resourceMap.getString("jLabelExpendiosMessages.text")); // NOI18N
        jLabelExpendiosMessages.setName("jLabelExpendiosMessages"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelExpendiosMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonExpendiosCSVJSON)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExpendiosJSONCSV))
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExpendiosCSVJSON)
                    .addComponent(jButtonExpendiosJSONCSV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelExpendiosMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jButtonConsignatariasCSVJSON.setText(resourceMap.getString("jButtonConsignatariasCSVJSON.text")); // NOI18N
        jButtonConsignatariasCSVJSON.setName("jButtonConsignatariasCSVJSON"); // NOI18N
        jButtonConsignatariasCSVJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsignatariasCSVJSONActionPerformed(evt);
            }
        });

        jButtonConsignatariasJSONCSV.setText(resourceMap.getString("jButtonConsignatariasJSONCSV.text")); // NOI18N
        jButtonConsignatariasJSONCSV.setName("jButtonConsignatariasJSONCSV"); // NOI18N
        jButtonConsignatariasJSONCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsignatariasJSONCSVActionPerformed(evt);
            }
        });

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabelConsignatariasMessages.setFont(resourceMap.getFont("jLabelConsignatariasMessages.font")); // NOI18N
        jLabelConsignatariasMessages.setText(resourceMap.getString("jLabelConsignatariasMessages.text")); // NOI18N
        jLabelConsignatariasMessages.setName("jLabelConsignatariasMessages"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelConsignatariasMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonConsignatariasCSVJSON)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConsignatariasJSONCSV))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConsignatariasCSVJSON)
                    .addComponent(jButtonConsignatariasJSONCSV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelConsignatariasMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cobradorconversor.CobradorConversorApp.class).getContext().getActionMap(CobradorConversorView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExpendiosCSVJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpendiosCSVJSONActionPerformed
        // TODO add your handling code here:
        JFileChooser jfilechooser = new JFileChooser();
        jfilechooser.setCurrentDirectory(new File("c:\\"));
        int iRetVal = jfilechooser.showDialog(jPanel1, null);

        if (iRetVal == JFileChooser.APPROVE_OPTION) {
            File fSelected = jfilechooser.getSelectedFile();
            String sFileAP = fSelected.getAbsolutePath();
            Rutas rutasParsed = ParseCSV(sFileAP);
            System.out.println("fSelected.getAbsolutePath(): "+fSelected.getAbsolutePath());
            System.out.println("fSelected.getParent(): "+fSelected.getParent());
            boolean bWriteResult = WriteJSONFiles(rutasParsed, fSelected.getParent());
            if (bWriteResult) {
                jLabelExpendiosMessages.setForeground(Color.black);
                jLabelExpendiosMessages.setText("<html>OK: "+GetMessages()+"</html>");
            }
            else {
                jLabelExpendiosMessages.setForeground(Color.red);
                jLabelExpendiosMessages.setText("<html>ERROR: "+GetMessages()+"</html>");
            }
        }
    }//GEN-LAST:event_jButtonExpendiosCSVJSONActionPerformed

    private void jButtonExpendiosJSONCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExpendiosJSONCSVActionPerformed
        // TODO add your handling code here:
        JFileChooser jfilechooser = new JFileChooser();
        jfilechooser.setCurrentDirectory(new File("c:\\"));
        int iRetVal = jfilechooser.showDialog(jPanel1, null);

        if (iRetVal == JFileChooser.APPROVE_OPTION) {
            File fSelected = jfilechooser.getSelectedFile();
            String sFileAP = fSelected.getAbsolutePath();

            try {
                String sFileFull = "";
                BufferedReader in = new BufferedReader(new FileReader(sFileAP));
                String str;
                while ((str = in.readLine()) != null) {
                    sFileFull = sFileFull + str;
                }
                in.close();

                Rutas RUTAS = new Rutas(sFileFull);

                String sCSVFull = "EMPLEADO;ZONARUTA;RAZONSOC;DIRECCION;CODIGOCLI;FECHAMOV;ENTREGAS;DEVOLUCION;FALTANTES;SOBRANTES;VALORUNITA;COBRADO;VALORFEC;VALORCOM;NOMPU;FECHAARC"+System.getProperty("line.separator");
                Enumeration enumRutas = RUTAS.GetVectorRutas().elements();
                while (enumRutas.hasMoreElements()) {
                    Ruta ruta = (Ruta) enumRutas.nextElement();
                    Enumeration enumExpendios = ruta.GetVectorExpendios().elements();
                    while (enumExpendios.hasMoreElements()) {
                        Expendio expendio = (Expendio) enumExpendios.nextElement();
                        Enumeration enumFechas = expendio.GetVectorFechas().elements();
                        while (enumFechas.hasMoreElements()) {
                            Fecha fecha = (Fecha) enumFechas.nextElement();

                            sCSVFull = sCSVFull + ruta.GetCobrador() + ";" + ruta.GetZona() + ";" + expendio.GetNombre() + ";" + expendio.GetDireccion() + ";" + expendio.GetCodigoCliente() + ";" + fecha.GetFecha() + ";" + fecha.GetEntregados() + ";" + fecha.GetDevueltos() + ";" + fecha.GetFaltantes() + ";" + fecha.GetSobrantes() + ";" + fecha.GetValorUnitario() + ";" + fecha.GetCobrado() + ";" + fecha.GetValor() + ";" + expendio.GetCompendio() + ";" + ruta.GetProducto() + ";" + ruta.GetFecha() + System.getProperty("line.separator");
                        }
                    }
                }

                // (1) get today's date
                Date today = Calendar.getInstance().getTime();

                // (2) create our "formatter" (our custom format)
                SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");

                // (3) create a new String in the format we want
                String folderName = formatter.format(today);

                // (4) this prints "Folder Name = 2009-09-06-08.23.23"
                //System.out.println("Folder Name = " + folderName);

                //String sFileOutput = fSelected.getParent() + System.getProperty("file.separator") + "expeout_" + folderName + ".csv";
                String sFullName = fSelected.getAbsolutePath();
                int idx = sFullName.indexOf(".json");
                String sFileNew = sFullName.substring(0, idx)+".csv";
                //String sFileOutput = fSelected.getParent() + System.getProperty("file.separator") + "expeout_" + folderName + ".csv";
                String sFileOutput = sFileNew;
                BufferedWriter out = new BufferedWriter(new FileWriter(sFileOutput));
                out.write(sCSVFull);
                out.close();


                jLabelExpendiosMessages.setForeground(Color.black);
                jLabelExpendiosMessages.setText("<html>OK: Generado archivo "+System.getProperty("line.separator")+"'"+sFileOutput+"'.</html>");

            } catch (IOException ioex) {
                jLabelExpendiosMessages.setForeground(Color.red);
                jLabelExpendiosMessages.setText("<html>ERROR: "+ioex.toString()+"</html>");
                ioex.printStackTrace();
            } catch (Exception ex) {
                jLabelExpendiosMessages.setForeground(Color.red);
                jLabelExpendiosMessages.setText("<html>ERROR: "+ex.toString()+"</html>");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonExpendiosJSONCSVActionPerformed

    private void jButtonConsignatariasCSVJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsignatariasCSVJSONActionPerformed
        // TODO add your handling code here:
        StringBuffer sb = new StringBuffer();

        JFileChooser jfilechooser = new JFileChooser();
        jfilechooser.setCurrentDirectory(new File("c:\\"));
        int iRetVal = jfilechooser.showDialog(jPanel1, null);

        if (iRetVal == JFileChooser.APPROVE_OPTION) {
            File fSelected = jfilechooser.getSelectedFile();
            String sFileAP = fSelected.getAbsolutePath();
            RutasConsignatarias rutasconsignatariasParsed = ParseCSVConsignatarias(sFileAP);
            System.out.println("fSelected.getAbsolutePath(): "+fSelected.getAbsolutePath());
            System.out.println("fSelected.getParent(): "+fSelected.getParent());
            boolean bWriteResult = WriteJSONFilesConsignatarias(rutasconsignatariasParsed, fSelected.getParent());
            if (bWriteResult) {
                jLabelConsignatariasMessages.setForeground(Color.black);
                jLabelConsignatariasMessages.setText("<html>OK: "+GetMessages()+"</html>");
            }
            else {
                jLabelConsignatariasMessages.setForeground(Color.red);
                jLabelConsignatariasMessages.setText("<html>ERROR: "+GetMessages()+"</html>");
            }
        }
    }//GEN-LAST:event_jButtonConsignatariasCSVJSONActionPerformed

    private void jButtonConsignatariasJSONCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsignatariasJSONCSVActionPerformed
        // TODO add your handling code here:
        JFileChooser jfilechooser = new JFileChooser();
        jfilechooser.setCurrentDirectory(new File("c:\\"));
        int iRetVal = jfilechooser.showDialog(jPanel1, null);

        if (iRetVal == JFileChooser.APPROVE_OPTION) {
            File fSelected = jfilechooser.getSelectedFile();
            String sFileAP = fSelected.getAbsolutePath();

            try {
                String sFileFull = "";
                BufferedReader in = new BufferedReader(new FileReader(sFileAP));
                String str;
                while ((str = in.readLine()) != null) {
                    sFileFull = sFileFull + str;
                }
                in.close();

                RutasConsignatarias RUTAS = new RutasConsignatarias(sFileFull);

                String sCSVFull = "EMPLEADO;ZONARUTA;NOMBRE;NOMPU;RAZONSOC;CODIGOCLI;FECHAMOV;ENTREGAS;DEVOLUCION;FALTANTES;VALORUNITA;FEPAGO;NUMEROF"+System.getProperty("line.separator");
                Enumeration enumRutas = RUTAS.GetVectorRutas().elements();
                while (enumRutas.hasMoreElements()) {
                    RutaConsignatarias ruta = (RutaConsignatarias) enumRutas.nextElement();
                    Enumeration enumRazonesSociales = ruta.GetVectorRazonSocial().elements();
                    while (enumRazonesSociales.hasMoreElements()) {
                        RazonSocialConsignatarias razonsocial = (RazonSocialConsignatarias) enumRazonesSociales.nextElement();
                        Enumeration enumFacturas = razonsocial.GetVectorFacturas().elements();
                        while (enumFacturas.hasMoreElements()) {
                            FacturaConsignatarias factura = (FacturaConsignatarias) enumFacturas.nextElement();
                            Enumeration enumFechas = factura.GetVectorFechas().elements();
                            while (enumFechas.hasMoreElements()) {
                                FechaConsignatarias fecha = (FechaConsignatarias) enumFechas.nextElement();

                                sCSVFull = sCSVFull + ruta.GetCobrador() + ";" + razonsocial.GetZona() + ";" + razonsocial.GetNombreRuta() + ";" + razonsocial.GetProducto() + ";" + razonsocial.GetConsignataria() + ";" + razonsocial.GetCodigo() + ";" + fecha.GetFecha() + ";" + fecha.GetEntregados() + ";" + fecha.GetDevueltos() + ";" + fecha.GetFaltantes() + ";" + fecha.GetValorUnitario() + ";" + factura.GetFechaPago() + ";" + factura.GetNoFactura() + System.getProperty("line.separator");
                            }
                        }
                    }
                }

                // (1) get today's date
                Date today = Calendar.getInstance().getTime();

                // (2) create our "formatter" (our custom format)
                SimpleDateFormat formatter = new SimpleDateFormat("yyyyMM");

                // (3) create a new String in the format we want
                String folderName = formatter.format(today);

                // (4) this prints "Folder Name = 2009-09-06-08.23.23"
                //System.out.println("Folder Name = " + folderName);

                //String sFileOutput = fSelected.getParent() + System.getProperty("file.separator") + "expeout_" + folderName + ".csv";
                String sFullName = fSelected.getAbsolutePath();
                int idx = sFullName.indexOf(".json");
                String sFileNew = sFullName.substring(0, idx)+".csv";
                //String sFileOutput = fSelected.getParent() + System.getProperty("file.separator") + "expeout_" + folderName + ".csv";
                String sFileOutput = sFileNew;
                BufferedWriter out = new BufferedWriter(new FileWriter(sFileOutput));
                out.write(sCSVFull);
                out.close();


                jLabelConsignatariasMessages.setForeground(Color.black);
                jLabelConsignatariasMessages.setText("<html>OK: Generado archivo "+System.getProperty("line.separator")+"'"+sFileOutput+"'.</html>");

            } catch (IOException ioex) {
                jLabelConsignatariasMessages.setForeground(Color.red);
                jLabelConsignatariasMessages.setText("<html>ERROR: "+ioex.toString()+"</html>");
                ioex.printStackTrace();
            } catch (Exception ex) {
                jLabelConsignatariasMessages.setForeground(Color.red);
                jLabelConsignatariasMessages.setText("<html>ERROR: "+ex.toString()+"</html>");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonConsignatariasJSONCSVActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConsignatariasCSVJSON;
    private javax.swing.JButton jButtonConsignatariasJSONCSV;
    private javax.swing.JButton jButtonExpendiosCSVJSON;
    private javax.swing.JButton jButtonExpendiosJSONCSV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelConsignatariasMessages;
    private javax.swing.JLabel jLabelExpendiosMessages;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    
    
    private String sMessages;
    private boolean bSuccess;


    private void SetMessages(String sMsg) {
        this.sMessages = sMsg;
    }

    private String GetMessages() {
        return this.sMessages;
    }


    public boolean GetSuccess() {
        return this.bSuccess;
    }

    public void SetSuccess(boolean suc) {
        this.bSuccess = suc;
    }


    private Rutas ParseCSV(String sCSVFile) {
        int contador = 0;
        Rutas rutas = new Rutas();
        Ruta ruta = new Ruta();
        Expendio expendio = new Expendio();
        Fecha fecha = new Fecha();

        Vector vFechas = new Vector();
        Vector vExpendios = new Vector();
        Vector vRutas = new Vector();
        Vector vRUTAS = new Vector();

        try {
            CSVReader reader = new CSVReader(new FileReader(sCSVFile), ';');
            String[] nextLine = reader.readNext();
            String sCobradorAnt = "";
            String sCobrador = "";
            String a_line = "";
            String sFull = "";

            while ((nextLine = reader.readNext()) != null) {
                // nextLine[] is an array of values from the line
                //System.out.println(nextLine[0] + nextLine[1] + "etc...");
                a_line = "";
                for (int i = 0; i < nextLine.length; i++) {
                    a_line = a_line + nextLine[i] + ";";
                }
                a_line = a_line.substring(0, a_line.length() - 1);

                sCobrador = nextLine[0];
                if (!sCobrador.equalsIgnoreCase(sCobradorAnt) && (sCobradorAnt == null || sCobradorAnt.equalsIgnoreCase(""))) {
                    sCobradorAnt = nextLine[0];
                    sFull = sFull + a_line + System.getProperty("line.separator");
                } else if (!sCobrador.equalsIgnoreCase(sCobradorAnt) && sCobradorAnt != null && !sCobrador.equalsIgnoreCase("")) {
                    sCobradorAnt = nextLine[0];
                    sFull = sFull + "||-empl-||" + a_line + System.getProperty("line.separator");
                } else {
                    sFull = sFull + a_line + System.getProperty("line.separator");
                }
            }

            String[] splitEmpleado = sFull.split("\\|\\|-empl-\\|\\|");
            System.out.println("splitted.length: " + splitEmpleado.length);
            CSVReader readerEmpleado;
            String[] nextLineEmpleado;
            String a_lineEmpleado = "";
            String sExpendioAnt = "";
            String sExpendio = "";
            String sFullEmpleado = "";

            vRUTAS = new Vector();
            for (int i = 0; i < splitEmpleado.length; i++) {
                if (i==0) {
                    sFullEmpleado = "||-expe-||";
                }
                String sEmpleadoNombre = "";
                String sRutaProducto = "";
                String sRutaZona = "";
                readerEmpleado = new CSVReader(new StringReader(splitEmpleado[i]), ';');
                while ((nextLineEmpleado = readerEmpleado.readNext()) != null) {

                    a_lineEmpleado = "";
                    for (int j = 0; j < nextLineEmpleado.length; j++) {
                        a_lineEmpleado = a_lineEmpleado + nextLineEmpleado[j] + ";";
                        //System.out.println(Arrays.toString(nextLineEmpleado));
                    }
                    a_lineEmpleado = a_lineEmpleado.substring(0, a_lineEmpleado.length() - 1);

                    sExpendio = nextLineEmpleado[4];
                    if (!sExpendio.equalsIgnoreCase(sExpendioAnt) && (sExpendioAnt == null || sExpendioAnt.equalsIgnoreCase(""))) {
                        sExpendioAnt = nextLineEmpleado[4];
                        sFullEmpleado = sFullEmpleado + a_lineEmpleado + System.getProperty("line.separator");
                    } else if (!sExpendio.equalsIgnoreCase(sExpendioAnt) && sExpendioAnt != null && !sExpendioAnt.equalsIgnoreCase("")) {
                        sExpendioAnt = nextLineEmpleado[4];
                        sFullEmpleado = sFullEmpleado + "||-expe-||" + a_lineEmpleado + System.getProperty("line.separator");
                    } else {
                        sFullEmpleado = sFullEmpleado + a_lineEmpleado + System.getProperty("line.separator");
                    }

                    sEmpleadoNombre = nextLineEmpleado[0];
                    sRutaProducto = nextLineEmpleado[16];
                    sRutaZona = nextLineEmpleado[1];
                }

                String[] splitExpendios = sFullEmpleado.split("\\|\\|-expe-\\|\\|");
                System.out.println("splitExpendios.length: "+splitExpendios.length);
                sFullEmpleado = "";


                CSVReader readerExpendio;
                String[] nextLineExpendio;
                String a_lineExpendio = "";

                vExpendios = new Vector();
                for (int m = 1; m < splitExpendios.length; m++) {
                    vFechas = new Vector();
                    String sExpendioNombre = "";
                    String sExpendioDireccion = "";
                    String sExpendioCodigoCliente = "";
                    readerExpendio = new CSVReader(new StringReader(splitExpendios[m]), ';');
                    while ((nextLineExpendio = readerExpendio.readNext()) != null) {

                        contador++;

                        fecha = new Fecha();

                        String sFechaFecha = nextLineExpendio[9];
                        if (sFechaFecha==null || sFechaFecha.equalsIgnoreCase("")) {
                            fecha.SetFecha("");
                        }
                        else {
                            fecha.SetFecha(sFechaFecha);
                        }

                        String sFechaEntregados = nextLineExpendio[10];
                        if (sFechaEntregados==null || sFechaEntregados.equalsIgnoreCase("")) {
                            fecha.SetEntregados(0);
                        }
                        else {
                            int iFechaEntregados = Integer.parseInt(sFechaEntregados);
                            fecha.SetEntregados(iFechaEntregados);
                        }

                        String sFechaDevueltos = nextLineExpendio[11];
                        if (sFechaDevueltos==null || sFechaDevueltos.equalsIgnoreCase("")) {
                            fecha.SetDevueltos(0);
                        }
                        else {
                            int iFechaDevueltos = Integer.parseInt(sFechaDevueltos);
                            fecha.SetDevueltos(iFechaDevueltos);
                        }

                        String sFechaFaltantes = nextLineExpendio[12];
                        if (sFechaFaltantes==null || sFechaFaltantes.equalsIgnoreCase("")) {
                            fecha.SetFaltantes(0);
                        }
                        else {
                            int iFechaFaltantes = Integer.parseInt(sFechaFaltantes);
                            fecha.SetFaltantes(iFechaFaltantes);
                        }

                        String sFechaValorUnitario = nextLineExpendio[13];
                        if (sFechaValorUnitario==null || sFechaValorUnitario.equalsIgnoreCase("")) {
                            fecha.SetValorUnitario(0);
                        }
                        else {
                            int iFechaValorUnitario = Integer.parseInt(sFechaValorUnitario);
                            fecha.SetValorUnitario(iFechaValorUnitario);
                        }

                        fecha.SetVisitado(0);

                        vFechas.add(fecha);

                        sExpendioNombre = nextLineExpendio[4];
                        sExpendioDireccion = nextLineExpendio[5];
                        sExpendioCodigoCliente = nextLineExpendio[6];
                    }

                    expendio = new Expendio();
                    expendio.SetNombre(sExpendioNombre);
                    expendio.SetDireccion(sExpendioDireccion);
                    expendio.SetCodigoCliente(sExpendioCodigoCliente);
                    expendio.SetCompendio(0);
                    expendio.SetVectorFechas(vFechas);
                    expendio.SetVisitado(0);
                    vExpendios.add(expendio);
                }

                ruta = new Ruta();
                ruta.SetCobrador(sEmpleadoNombre);
                ruta.SetProducto(sRutaProducto);
                ruta.SetZona(sRutaZona);

                // (1) get today's date
                Date today = Calendar.getInstance().getTime();

                // (2) create our "formatter" (our custom format)
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yy");

                // (3) create a new String in the format we want
                String folderName = formatter.format(today);

                // (4) this prints "Folder Name = 2009-09-06-08.23.23"
                //System.out.println("Folder Name = " + folderName);

                //ruta.SetFecha((new Date()).toString());
                ruta.SetFecha(folderName);
                ruta.SetVectorExpendios(vExpendios);
                vRutas.add(ruta);
            }

            rutas.SetVectorRutas(vRutas);
            System.out.println("--OUTPUT RUTAS START--");
            System.out.println(rutas.JSONObjectToString());
            System.out.println("--OUTPUT RUTAS END--");

            System.out.println("END");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return rutas;
    }

    private RutasConsignatarias ParseCSVConsignatarias(String sCSVFile) {
        int contador = 0;
        RutasConsignatarias rutas = new RutasConsignatarias();
        RazonSocialConsignatarias razonsocialconsignatarias = new RazonSocialConsignatarias();
        RutaConsignatarias rutaconsignatarias = new RutaConsignatarias();
        FacturaConsignatarias facturaconsignatarias = new FacturaConsignatarias();
        FechaConsignatarias fechaconsignatarias = new FechaConsignatarias();

        Vector vFechas = new Vector();
        Vector vFacturas = new Vector();
        Vector vRazonesSociales = new Vector();
        Vector vRutas = new Vector();
        Vector vRUTAS = new Vector();

        try {
            String sFechaFechaMov, sFechaEntregas, sFechaDevolucion, sFechaFaltantes, sFechaValorUnitario, sFacturaNumeroF, sRazonSocialNombreRuta, sRutaEmpleado, sRutaZona, sRutaNomPu, sRutaRazonSoc, sRutaCodigoCli;
            sFechaFechaMov = sFechaEntregas = sFechaDevolucion = sFechaFaltantes = sFechaValorUnitario = sFacturaNumeroF = sRazonSocialNombreRuta = sRutaEmpleado = sRutaZona = sRutaNomPu = sRutaRazonSoc = sRutaCodigoCli = "";

            CSVReader reader = new CSVReader(new FileReader(sCSVFile), ';');
            String[] nextLine = reader.readNext();
            String sCobradorAnt = "";
            String sCobrador = "";
            String a_line = "";
            String sFull = "||-empl-||";

            while ((nextLine = reader.readNext()) != null) {
                // nextLine[] is an array of values from the line
                //System.out.println(nextLine[0] + nextLine[1] + "etc...");
                a_line = "";
                for (int i = 0; i < nextLine.length; i++) {
                    a_line = a_line + nextLine[i] + ";";
                }
                a_line = a_line.substring(0, a_line.length() - 1);

                sCobrador = nextLine[0];
                if (!sCobrador.equalsIgnoreCase(sCobradorAnt) && (sCobradorAnt == null || sCobradorAnt.equalsIgnoreCase(""))) {
                    sCobradorAnt = nextLine[0];
                    sFull = sFull + a_line + System.getProperty("line.separator");
                } else if (!sCobrador.equalsIgnoreCase(sCobradorAnt) && sCobradorAnt != null && !sCobrador.equalsIgnoreCase("")) {
                    sCobradorAnt = nextLine[0];
                    sFull = sFull + "||-empl-||" + a_line + System.getProperty("line.separator");
                } else {
                    sFull = sFull + a_line + System.getProperty("line.separator");
                }
            }

            String[] splitEmpleado = sFull.split("\\|\\|-empl-\\|\\|");
            System.out.println("splitted.length: " + splitEmpleado.length);
            CSVReader readerEmpleado;
            String[] nextLineEmpleado;
            String a_lineEmpleado = "";
            String sRazonSocAnt = "";
            String sRazonSoc = "";
            String sFullEmpleado = "||-razs-||";

            vRUTAS = new Vector();
            for (int i = 1; i < splitEmpleado.length; i++) {
                sFullEmpleado = "||-razs-||";
                sRazonSocAnt = "";
                sRazonSoc = "";

                /*if (i == 0) {
                    sFullEmpleado = "||-razs-||";
                }*/

                readerEmpleado = new CSVReader(new StringReader(splitEmpleado[i]), ';');
                while ((nextLineEmpleado = readerEmpleado.readNext()) != null) {

                    a_lineEmpleado = "";
                    for (int j = 0; j < nextLineEmpleado.length; j++) {
                        a_lineEmpleado = a_lineEmpleado + nextLineEmpleado[j] + ";";
                        //System.out.println(Arrays.toString(nextLineEmpleado));
                    }
                    a_lineEmpleado = a_lineEmpleado.substring(0, a_lineEmpleado.length() - 1);

                    sRazonSoc = nextLineEmpleado[4];
                    if (!sRazonSoc.equalsIgnoreCase(sRazonSocAnt) && (sRazonSocAnt == null || sRazonSocAnt.equalsIgnoreCase(""))) {
                        sRazonSocAnt = nextLineEmpleado[4];
                        sFullEmpleado = sFullEmpleado + a_lineEmpleado + System.getProperty("line.separator");
                    } else if (!sRazonSoc.equalsIgnoreCase(sRazonSocAnt) && sRazonSocAnt != null && !sRazonSocAnt.equalsIgnoreCase("")) {
                        sRazonSocAnt = nextLineEmpleado[4];
                        sFullEmpleado = sFullEmpleado + "||-razs-||" + a_lineEmpleado + System.getProperty("line.separator");
                    } else {
                        sFullEmpleado = sFullEmpleado + a_lineEmpleado + System.getProperty("line.separator");
                    }
                }


                String[] splitRazonSocs = sFullEmpleado.split("\\|\\|-razs-\\|\\|");
                System.out.println("splitRazonSocs.length: " + splitRazonSocs.length);
                String sNumeroFAnt = "";
                String sNumeroF = "";
                String sFullRazonSoc = "||-fact-||";


                CSVReader readerRazonSoc;
                String[] nextLineRazonSoc;
                String a_lineRazonSoc = "";

                vRazonesSociales = new Vector();
                for (int m = 1; m < splitRazonSocs.length; m++) {
                    sFullRazonSoc = "||-fact-||";
                    //sFullRazonSoc = "";
                    sNumeroFAnt = "";
                    sNumeroF = "";

                    /*if (i == 0) {
                        sFullRazonSoc = "||-fact-||";
                    }*/

                    readerRazonSoc = new CSVReader(new StringReader(splitRazonSocs[m]), ';');

                    while ((nextLineRazonSoc = readerRazonSoc.readNext()) != null) {

                        a_lineRazonSoc = "";
                        for (int n = 0; n < nextLineRazonSoc.length; n++) {
                            a_lineRazonSoc = a_lineRazonSoc + nextLineRazonSoc[n] + ";";
                            //System.out.println(Arrays.toString(nextLineEmpleado));
                        }
                        a_lineRazonSoc = a_lineRazonSoc.substring(0, a_lineRazonSoc.length() - 1);

                        //sNumeroF = nextLineRazonSoc[4];
                        sNumeroF = nextLineRazonSoc[15];
                        if (!sNumeroF.equalsIgnoreCase(sNumeroFAnt) && (sNumeroFAnt == null || sNumeroFAnt.equalsIgnoreCase(""))) {
                            //sNumeroFAnt = nextLineRazonSoc[4];
                            sNumeroFAnt = nextLineRazonSoc[15];
                            sFullRazonSoc = sFullRazonSoc + a_lineRazonSoc + System.getProperty("line.separator");
                        } else if (!sNumeroF.equalsIgnoreCase(sNumeroFAnt) && sNumeroFAnt != null && !sNumeroFAnt.equalsIgnoreCase("")) {
                            //sNumeroFAnt = nextLineRazonSoc[4];
                            sNumeroFAnt = nextLineRazonSoc[15];
                            sFullRazonSoc = sFullRazonSoc + "||-fact-||" + a_lineRazonSoc + System.getProperty("line.separator");
                        } else {
                            sFullRazonSoc = sFullRazonSoc + a_lineRazonSoc + System.getProperty("line.separator");
                        }
                    }


                    String[] splitFacturas = sFullRazonSoc.split("\\|\\|-fact-\\|\\|");
                    System.out.println("splitFacturas.length: " + splitFacturas.length);
                    //sFullEmpleado = "";

                    CSVReader readerFacturas;
                    String[] nextLineFactura;
                    //String a_lineRazonSoc = "";

                    vFacturas = new Vector();
                    for (int o = 1; o < splitFacturas.length; o++) {

                        vFechas = new Vector();

                        readerFacturas = new CSVReader(new StringReader(splitFacturas[o]), ';');
                        while ((nextLineFactura = readerFacturas.readNext()) != null) {

                            contador++;

                            fechaconsignatarias = new FechaConsignatarias();

                            sFechaFechaMov = nextLineFactura[7];
                            if (sFechaFechaMov == null || sFechaFechaMov.equalsIgnoreCase("")) {
                                fechaconsignatarias.SetFecha("");
                            } else {
                                fechaconsignatarias.SetFecha(sFechaFechaMov);
                            }

                            sFechaEntregas = nextLineFactura[8];
                            if (sFechaEntregas == null || sFechaEntregas.equalsIgnoreCase("")) {
                                fechaconsignatarias.SetEntregados(0);
                            } else {
                                int iFechaEntregas = Integer.parseInt(sFechaEntregas);
                                fechaconsignatarias.SetEntregados(iFechaEntregas);
                            }

                            sFechaDevolucion = nextLineFactura[9];
                            if (sFechaDevolucion == null || sFechaDevolucion.equalsIgnoreCase("")) {
                                fechaconsignatarias.SetDevueltos(0);
                            } else {
                                int iFechaDevolucion = Integer.parseInt(sFechaDevolucion);
                                fechaconsignatarias.SetDevueltos(iFechaDevolucion);
                            }

                            sFechaFaltantes = nextLineFactura[10];
                            if (sFechaFaltantes == null || sFechaFaltantes.equalsIgnoreCase("")) {
                                fechaconsignatarias.SetFaltantes(0);
                            } else {
                                int iFechaFaltantes = Integer.parseInt(sFechaFaltantes);
                                fechaconsignatarias.SetFaltantes(iFechaFaltantes);
                            }

                            sFechaValorUnitario = nextLineFactura[11];
                            if (sFechaValorUnitario == null || sFechaValorUnitario.equalsIgnoreCase("")) {
                                fechaconsignatarias.SetValorUnitario(0);
                            } else {
                                int iFechaValorUnitario = Integer.parseInt(sFechaValorUnitario);
                                fechaconsignatarias.SetValorUnitario(iFechaValorUnitario);
                            }

                            fechaconsignatarias.SetVisitado(0);

                            vFechas.add(fechaconsignatarias);


                            sFacturaNumeroF = nextLineFactura[15];

                            sRazonSocialNombreRuta = nextLineFactura[2];

                            sRutaEmpleado = nextLineFactura[0];
                            sRutaZona = nextLineFactura[1];
                            sRutaNomPu = nextLineFactura[3];
                            sRutaRazonSoc = nextLineFactura[4];
                            sRutaCodigoCli = nextLineFactura[6];
                        }

                        facturaconsignatarias = new FacturaConsignatarias();

                        facturaconsignatarias.SetNoFactura(sFacturaNumeroF);

                        facturaconsignatarias.SetFechaPago("");

                        facturaconsignatarias.SetCompendio(0);
                        facturaconsignatarias.SetVectorFechas(vFechas);
                        facturaconsignatarias.SetVisitado(0);

                        vFacturas.add(facturaconsignatarias);
                    }

                    razonsocialconsignatarias = new RazonSocialConsignatarias();

                    razonsocialconsignatarias.SetZona(sRutaZona);
                    razonsocialconsignatarias.SetNombreRuta(sRazonSocialNombreRuta);
                    razonsocialconsignatarias.SetConsignataria(sRutaRazonSoc);
                    razonsocialconsignatarias.SetCodigo(sRutaCodigoCli);
                    razonsocialconsignatarias.SetProducto(sRutaNomPu);
                    razonsocialconsignatarias.SetAgencia("");

                    razonsocialconsignatarias.SetVectorFacturas(vFacturas);
                    
                    vRazonesSociales.add(razonsocialconsignatarias);
                }

                rutaconsignatarias = new RutaConsignatarias();

                rutaconsignatarias.SetCobrador(sRutaEmpleado);

                // (1) get today's date
                Date today = Calendar.getInstance().getTime();

                // (2) create our "formatter" (our custom format)
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yy");

                // (3) create a new String in the format we want
                String folderName = formatter.format(today);

                // (4) this prints "Folder Name = 2009-09-06-08.23.23"
                //System.out.println("Folder Name = " + folderName);

                //ruta.SetFecha((new Date()).toString());
                rutaconsignatarias.SetFecha(folderName);

                rutaconsignatarias.SetVectorRazonSocial(vRazonesSociales);
                vRutas.add(rutaconsignatarias);
            }

            rutas.SetVectorRutas(vRutas);
            System.out.println("--OUTPUT RUTAS START--");
            System.out.println(rutas.JSONObjectToString());
            System.out.println("--OUTPUT RUTAS END--");

            System.out.println("END");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return rutas;
    }


    private boolean WriteJSONFiles(Rutas rutas, String sAbsoluteDestination) {
        try {
            int c = 0;
            int iCntRutas = 0;

            JSONObject joOriginal = new JSONObject(rutas.JSONObjectToString());
            JSONArray jaRutas = joOriginal.getJSONArray("rutas");
            for (int i = 0; i < jaRutas.length(); i++) {
                JSONObject joElement = jaRutas.getJSONObject(i);
                JSONArray jaNew = new JSONArray();
                jaNew.put(joElement);
                JSONObject joMain = new JSONObject();
                joMain.put("rutas", jaNew);

                String sRutaCobrador = joElement.getString("COBRADOR");
                String sRutaCobradorEncoded = new String(sRutaCobrador.getBytes("ISO-8859-1"), "ISO-8859-1");
                String sRutaCobradorLC = sRutaCobradorEncoded.toLowerCase();
                String sRutaCobradorLCRA = sRutaCobradorLC.replaceAll(" ", "_");
                String sRutaCobradorFinal = sRutaCobradorLCRA.replaceAll("\\?", "");
                String sFileName = "COBRAD"+iCntRutas+".json";
                System.out.println(sFileName);
                //BufferedWriter out = new BufferedWriter(new FileWriter(sAbsoluteDestination+System.getProperty("file.separator")+sRutaCobradorFinal+".json"));
                BufferedWriter out = new BufferedWriter(new FileWriter(sAbsoluteDestination+System.getProperty("file.separator")+sFileName));
                out.write(joMain.toString());
                out.close();

                c++;
                iCntRutas++;
            }

            SetMessages("Escritos '"+c+"' archivos en '"+sAbsoluteDestination+"'.");
            SetSuccess(true);
        } catch (Exception ex) {
            SetMessages(ex.toString());
            SetSuccess(false);
            ex.printStackTrace();
        }

        return GetSuccess();
    }

    private boolean WriteJSONFilesConsignatarias(RutasConsignatarias rutas, String sAbsoluteDestination) {
        try {
            int c = 0;
            int iCntRutas = 0;

            JSONObject joOriginal = new JSONObject(rutas.JSONObjectToString());
            JSONArray jaRutas = joOriginal.getJSONArray("rutasconsignatarias");
            for (int i = 0; i < jaRutas.length(); i++) {
                JSONObject joElement = jaRutas.getJSONObject(i);
                JSONArray jaNew = new JSONArray();
                jaNew.put(joElement);
                JSONObject joMain = new JSONObject();
                joMain.put("rutasconsignatarias", jaNew);

                String sRutaCobrador = joElement.getString("COBRADOR");
                String sRutaCobradorEncoded = new String(sRutaCobrador.getBytes("ISO-8859-1"), "ISO-8859-1");
                String sRutaCobradorLC = sRutaCobradorEncoded.toLowerCase();
                String sRutaCobradorLCRA = sRutaCobradorLC.replaceAll(" ", "_");
                String sRutaCobradorFinal = sRutaCobradorLCRA.replaceAll("\\?", "");
                String sFileName = "CONSIG"+iCntRutas+".json";
                System.out.println(sFileName);
                //BufferedWriter out = new BufferedWriter(new FileWriter(sAbsoluteDestination+System.getProperty("file.separator")+sRutaCobradorFinal+".json"));
                BufferedWriter out = new BufferedWriter(new FileWriter(sAbsoluteDestination+System.getProperty("file.separator")+sFileName));
                out.write(joMain.toString());
                out.close();

                c++;
                iCntRutas++;
            }

            SetMessages("Escritos '"+c+"' archivos en '"+sAbsoluteDestination+"'.");
            SetSuccess(true);
        } catch (Exception ex) {
            SetMessages(ex.toString());
            SetSuccess(false);
            ex.printStackTrace();
        }

        return GetSuccess();
    }
}
